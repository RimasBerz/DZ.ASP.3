@{
    ViewData["Razor"] = "Razor";
}

<div class="text-center">
    <h1 class="display-4">Введение в Razor/CSHTML </h1>
</div>
<p>
    Одной из необходимых задач серверной разработки является
    расширение возможностей HTML с дополнением его алгоритмическими 
    конструкциями &lt;asp, однако им на смену пришел синтаксис Razor
</p>
<p>
    <b>Razor</b> - специальный инструмент для включения в HTML C#
    (CS) кода.Файлы с данными инструкиями имеют расширение .CSHTML
    Данные файлы "заполняються" на сервере,в браузер приходит 
    чистый HTML (без специнструкций). Осноным командным 
    символом Razor являеться &commat; поэтому в HTML для
    его вставки используеться сущность <b> &amp;commat;</b>
</p>
<h3>Выражения</h3>
<p>Выражение (в программировани) - инструкция,имеющая результат 
    Razor позволяет вычислять выражения,и выводить их результаты
    в HTMLпри помощи конструкции &commat;() :<br/>
    <code>
        &commat;(2 + 3) = @(2 + 3)
    </code>
    <br/>
    В простых выражениях круглые скобки можно не ставить,однако
    тогда границы выражения определяет Razor и не всегда так,как 
    хотелось бы нам
</p>
<h3>Блоки кода</h3>
<p>
    Инструкци, не требующие вывода результатов в HTML,помещаються
    в блоки &commat;{}. В этих блоках возможны практически любые 
    команды .NET (C#).
    Однако, применение лишней активности в представлениях не
    рекомендуеться паттерном MVC
</p>
<p>
    @{
        int x = 10;
        x += 5;
    }
    x + 2 = @x+2
</p>

<p>
    Средствами Razor можно создавать (или не создавать) блоки
    верстки в зависисимости от программных условий. Для этого
    искользуеться команда &commat;if(){...}
</p>
@if(x < 10)
{
    <b>Этот блок будет при x &lt; 10</b>
}
else
{
    <i>Этот блок будет при x &ge; 10</i>
}
<h3>Циклическая верстка</h3>
<p> 
    Основа современных сайтов - работа с массивами (коллекциями) 
    данных.В Razor есть все виды циклов C# -
    &commat;for(){...}
    &commat;foreach(){...}
    &commat;while(){...}
    &commat;dowhile(){...}
</p>

@{
        string[] strings = new string[] {"строка 1", "вторая строка"
,"строка № 3"};
}
@for(int i = 0; i < strings.Length; i++)
{
    int j = i + 1;
    <p>@j. @strings[j - 1]</p>
}
<p> Total: @strings.Length <br/>
    Total@strings.Length <br/>

</p>

<ul>
    @foreach (var item in strings)
    {
        <li>@item</li>
    }
</ul>


<table>
    <thead>
        <tr>
            <th>Номер</th>
            <th>Значение</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < strings.Length; i++)
        {
            <tr>
                <td>@i</td>
                <td>@strings[i]</td>
            </tr>
        }
    </tbody>
</table>

<div class="tiles-container">
    @foreach (var item in strings)
    {
            <div class="tile">
            @item
            </div>
    }
</div>